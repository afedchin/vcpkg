diff --git a/CMakeLists.txt b/CMakeLists.txt
new file mode 100644
index 0000000..4e05ad7
--- /dev/null
+++ b/CMakeLists.txt
@@ -0,0 +1,92 @@
+cmake_minimum_required(VERSION 3.0)
+
+project(cpluff VERSION 0.1.3 LANGUAGES C)
+
+if(MSVC)
+  set(CMAKE_DEBUG_POSTFIX "d")
+endif()
+
+find_package(expat 2.2.0 REQUIRED)
+
+add_library(cpluff SHARED
+  ${CMAKE_CURRENT_SOURCE_DIR}/kazlib/hash.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/kazlib/hash.c
+  ${CMAKE_CURRENT_SOURCE_DIR}/kazlib/list.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/kazlib/list.c
+  ${CMAKE_CURRENT_SOURCE_DIR}/libcpluff/context.c
+  ${CMAKE_CURRENT_SOURCE_DIR}/libcpluff/cpluff.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/libcpluff/cpluff.c
+  ${CMAKE_CURRENT_SOURCE_DIR}/libcpluff/defines.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/libcpluff/internal.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/libcpluff/logging.c
+  ${CMAKE_CURRENT_SOURCE_DIR}/libcpluff/pcontrol.c
+  ${CMAKE_CURRENT_SOURCE_DIR}/libcpluff/pinfo.c
+  ${CMAKE_CURRENT_SOURCE_DIR}/libcpluff/ploader.c
+  ${CMAKE_CURRENT_SOURCE_DIR}/libcpluff/pscan.c
+  ${CMAKE_CURRENT_SOURCE_DIR}/libcpluff/psymbol.c
+  ${CMAKE_CURRENT_SOURCE_DIR}/libcpluff/serial.c
+  ${CMAKE_CURRENT_SOURCE_DIR}/libcpluff/thread.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/libcpluff/thread_windows.c
+  ${CMAKE_CURRENT_SOURCE_DIR}/libcpluff/util.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/libcpluff/util.c
+  ${CMAKE_CURRENT_SOURCE_DIR}/libcpluff/win32/cpluffdef.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/libcpluff/win32/dirent.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/libcpluff/win32/dirent.c
+  ${CMAKE_CURRENT_SOURCE_DIR}/libcpluff/win32/win32_utils.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/libcpluff/win32/win32_utils.c
+)
+
+target_link_libraries(cpluff PRIVATE ${EXPAT_LIBRARIES})
+
+target_include_directories(cpluff
+  PRIVATE
+  $<BUILD_INTERFACE:kazlib;libcpluff;libcpluff/win32;${EXPAT_INCLUDE_DIR}>
+  INTERFACE
+  $<INSTALL_INTERFACE:include>
+)
+
+target_compile_definitions(cpluff
+  PRIVATE
+  XML_STATIC
+  _USRDLL
+  CP_C_API=CP_EXPORT
+  _CRT_SECURE_NO_WARNINGS
+  _CRT_NONSTDC_NO_DEPRECATE
+)
+
+include(CMakePackageConfigHelpers)
+write_basic_package_version_file(
+  ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config-version.cmake
+  VERSION ${PROJECT_VERSION}
+  COMPATIBILITY AnyNewerVersion
+)
+
+install(TARGETS ${PROJECT_NAME} EXPORT ${PROJECT_NAME}
+  RUNTIME DESTINATION bin
+  LIBRARY DESTINATION lib
+  ARCHIVE DESTINATION lib
+)
+
+install(FILES libcpluff/cpluff.h DESTINATION include)
+install(FILES libcpluff/win32/cpluffdef.h DESTINATION include/win32)
+
+if(MSVC)
+  set_target_properties(cpluff PROPERTIES COMPILE_PDB_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR} COMPILE_PDB_NAME cpluff)
+  install(FILES ${PROJECT_BINARY_DIR}/RelWithDebInfo/cpluff.pdb DESTINATION lib CONFIGURATIONS RelWithDebInfo)
+endif()
+
+install(EXPORT ${PROJECT_NAME}
+  FILE
+    ${PROJECT_NAME}.cmake
+  NAMESPACE
+    ${PROJECT_NAME}::
+  DESTINATION
+    lib/cmake/${PROJECT_NAME}
+)
+install(
+  FILES
+    cmake/${PROJECT_NAME}-config.cmake
+    ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config-version.cmake
+  DESTINATION
+    lib/cmake/${PROJECT_NAME}
+)
diff --git a/cmake/cpluff-config.cmake b/cmake/cpluff-config.cmake
new file mode 100644
index 0000000..5077cb3
--- /dev/null
+++ b/cmake/cpluff-config.cmake
@@ -0,0 +1 @@
+include(${CMAKE_CURRENT_LIST_DIR}/cpluff.cmake)
diff --git a/kazlib/hash.h b/kazlib/hash.h
index 1fbd246..50297ee 100644
--- a/kazlib/hash.h
+++ b/kazlib/hash.h
@@ -27,7 +27,11 @@
 #ifndef HASH_H
 #define HASH_H
 
+#ifdef _WIN32
+#include "../libcpluff/win32/cpluffdef.h"
+#else
 #include "../libcpluff/cpluffdef.h"
+#endif
 
 #include <limits.h>
 #ifdef KAZLIB_SIDEEFFECT_DEBUG
diff --git a/kazlib/list.h b/kazlib/list.h
index c449acb..ccad262 100644
--- a/kazlib/list.h
+++ b/kazlib/list.h
@@ -27,7 +27,11 @@
 #ifndef LIST_H
 #define LIST_H
 
+#ifdef _WIN32
+#include "../libcpluff/win32/cpluffdef.h"
+#else
 #include "../libcpluff/cpluffdef.h"
+#endif
 
 #include <limits.h>
 
diff --git a/libcpluff/cpluff.h b/libcpluff/cpluff.h
index 0f9797d..5a628d1 100644
--- a/libcpluff/cpluff.h
+++ b/libcpluff/cpluff.h
@@ -38,7 +38,11 @@
  * Preprocessor defines.
  */
  
-#include <cpluffdef.h>
+#ifdef _WIN32
+#include "win32/cpluffdef.h"
+#else
+#include "cpluffdef.h"
+#endif
 
 #ifdef __cplusplus
 extern "C" {
@@ -1076,6 +1080,25 @@ CP_C_API int cp_is_logged(cp_context_t *ctx, cp_log_severity_t severity) CP_GCC_
 CP_C_API cp_plugin_info_t * cp_load_plugin_descriptor(cp_context_t *ctx, const char *path, cp_status_t *status) CP_GCC_NONNULL(1, 2);
 
 /**
+ * Loads a plug-in descriptor from the specified block of memory and returns
+ * information about the plug-in. The plug-in descriptor
+ * is validated during loading. Possible loading errors are reported via the
+ * specified plug-in context. The plug-in is not installed to the context.
+ * If operation fails or the descriptor
+ * is invalid then NULL is returned. The caller must release the returned
+ * information by calling ::cp_release_plugin_info when it does not
+ * need the information anymore.
+ * The returned plug-in information must not be modified.
+ * 
+ * @param ctx the plug-in context
+ * @param buffer the buffer containing the plug-in descriptor.
+ * @param buffer_len the length of the buffer.
+ * @param status a pointer to the location where status code is to be stored, or NULL
+ * @return pointer to the information structure or NULL if error occurs
+ */
+CP_C_API cp_plugin_info_t * cp_load_plugin_descriptor_from_memory(cp_context_t *context, const char *buffer, unsigned int buffer_len, cp_status_t *error) CP_GCC_NONNULL(1, 2);
+
+/**
  * Installs the plug-in described by the specified plug-in information
  * structure to the specified plug-in context. The plug-in information
  * must have been loaded using ::cp_load_plugin_descriptor with the same
diff --git a/libcpluff/internal.h b/libcpluff/internal.h
index 91989e8..5f57617 100644
--- a/libcpluff/internal.h
+++ b/libcpluff/internal.h
@@ -83,7 +83,17 @@ extern "C" {
  * Macros
  * ----------------------------------------------------------------------*/
 
-#if defined(DLOPEN_POSIX)
+#if defined(_WIN32)
+#define DLHANDLE void *
+#if defined(WINAPI_FAMILY) && (WINAPI_FAMILY != WINAPI_FAMILY_DESKTOP_APP)
+#define DLOPEN(name) LoadPackagedLibrary(name, 0)
+#else
+#define DLOPEN(name) LoadLibraryA(name)
+#endif
+#define DLSYM(handle, symbol) GetProcAddress(handle, symbol)
+#define DLCLOSE(handle) CloseHandle(handle)
+#define DLERROR() "WIN32 - TODO"
+#elif defined(DLOPEN_POSIX)
 #define DLHANDLE void *
 #define DLOPEN(name) dlopen((name), RTLD_LAZY | RTLD_GLOBAL)
 #define DLSYM(handle, symbol) dlsym((handle), (symbol))
diff --git a/libcpluff/pcontrol.c b/libcpluff/pcontrol.c
index 83a24cb..d3cfb32 100644
--- a/libcpluff/pcontrol.c
+++ b/libcpluff/pcontrol.c
@@ -40,6 +40,9 @@
 #include "defines.h"
 #include "util.h"
 #include "internal.h"
+#ifdef _WIN32
+#include <windows.h>
+#endif
 
 
 /* ------------------------------------------------------------------------
@@ -64,7 +67,7 @@ static void assert_processed_zero(cp_context_t *context) {
 #endif
 
 static void unregister_extensions(cp_context_t *context, cp_plugin_info_t *plugin) {
-	int i;
+	unsigned int i;
 	
 	for (i = 0; i < plugin->num_ext_points; i++) {
 		cp_ext_point_t *ep = plugin->ext_points + i;
@@ -106,7 +109,7 @@ CP_C_API cp_status_t cp_install_plugin(cp_context_t *context, cp_plugin_info_t *
 	cp_plugin_t *rp = NULL;
 	cp_status_t status = CP_OK;
 	cpi_plugin_event_t event;
-	int i;
+	unsigned int i;
 
 	CHECK_NOT_NULL(context);
 	CHECK_NOT_NULL(plugin);
@@ -418,7 +421,7 @@ static int resolve_plugin_prel_rec(cp_context_t *context, cp_plugin_t *plugin) {
 	cp_status_t status = CP_OK;
 	int error_reported = 0;
 	lnode_t *node = NULL;
-	int i;
+	unsigned int i;
 
 	// Check if already resolved
 	if (plugin->state >= CP_PLUGIN_RESOLVED) {
@@ -1089,7 +1092,7 @@ static void free_extension_content(cp_extension_t *extension) {
 }
 
 static void free_cfg_element_content(cp_cfg_element_t *ce) {
-	int i;
+	unsigned int i;
 
 	assert(ce != NULL);
 	free(ce->name);
@@ -1105,7 +1108,7 @@ static void free_cfg_element_content(cp_cfg_element_t *ce) {
 }
 
 CP_HIDDEN void cpi_free_plugin(cp_plugin_info_t *plugin) {
-	int i;
+	unsigned int i;
 	
 	assert(plugin != NULL);
 	free(plugin->name);
diff --git a/libcpluff/pinfo.c b/libcpluff/pinfo.c
index 2bd5a45..cfbf049 100644
--- a/libcpluff/pinfo.c
+++ b/libcpluff/pinfo.c
@@ -194,7 +194,7 @@ CP_C_API cp_plugin_info_t * cp_get_plugin_info(cp_context_t *context, const char
 		// Lookup plug-in information
 		if (id != NULL) {
 			if ((node = hash_lookup(context->env->plugins, id)) == NULL) {
-				cpi_warnf(context, N_("Could not return information about unknown plug-in %s."), id);
+				//cpi_warnf(context, N_("Could not return information about unknown plug-in %s."), id);
 				status = CP_ERR_UNKNOWN;
 				break;
 			}
@@ -663,7 +663,7 @@ static cp_cfg_element_t * lookup_cfg_element(cp_cfg_element_t *base, const char
 		if (end - start == 2 && !strncmp(path + start, "..", 2)) {
 			base = base->parent;
 		} else {
-			int i;
+			unsigned int i;
 			int found = 0;
 			
 			for (i = 0; !found && i < base->num_children; i++) {
@@ -707,7 +707,7 @@ CP_C_API char * cp_lookup_cfg_value(cp_cfg_element_t *base, const char *path) {
 		if (attr == NULL) {
 			return e->value;
 		} else {
-			int i;
+			unsigned int i;
 			
 			for (i = 0; i < e->num_atts; i++) {
 				if (!strcmp(attr, e->atts[2*i])) {
diff --git a/libcpluff/ploader.c b/libcpluff/ploader.c
index 648c2bb..9119e87 100644
--- a/libcpluff/ploader.c
+++ b/libcpluff/ploader.c
@@ -37,6 +37,7 @@
 #include "defines.h"
 #include "util.h"
 #include "internal.h"
+#include "win32_utils.h"
 
 // Use XMLCALL if available
 #ifdef XMLCALL
@@ -57,7 +58,7 @@
 #define CP_CFG_ELEMENT_VALUE_INITSIZE 64
 
 /// Plugin descriptor name 
-#define CP_PLUGIN_DESCRIPTOR "plugin.xml"
+#define CP_PLUGIN_DESCRIPTOR "addon.xml"
 
 
 /* ------------------------------------------------------------------------
@@ -520,7 +521,7 @@ static void CP_XMLCALL start_element_handler(
 	static const XML_Char * const opt_bwcompatibility_atts[] = { "abi", "api", NULL };
 	static const XML_Char * const req_cpluff_atts[] = { "version", NULL };
 	static const XML_Char * const opt_cpluff_atts[] = { NULL };
-	static const XML_Char * const req_import_atts[] = { "plugin", NULL };
+	static const XML_Char * const req_import_atts[] = { "addon", NULL };
 	static const XML_Char * const opt_import_atts[] = { "version", "optional", NULL };
 	static const XML_Char * const req_runtime_atts[] = { "library", NULL };
 	static const XML_Char * const opt_runtime_atts[] = { "funcs", NULL };
@@ -535,7 +536,7 @@ static void CP_XMLCALL start_element_handler(
 	switch (plcontext->state) {
 
 		case PARSER_BEGIN:
-			if (!strcmp(name, "plugin")) {
+			if (!strcmp(name, "addon")) {
 				plcontext->state = PARSER_PLUGIN;
 				if (!check_attributes(plcontext, name, atts,
 						req_plugin_atts, opt_plugin_atts)) {
@@ -745,7 +746,7 @@ static void CP_XMLCALL start_element_handler(
 					import->plugin_id = NULL;
 					import->version = NULL;
 					for (i = 0; atts[i] != NULL; i += 2) {
-						if (!strcmp(atts[i], "plugin")) {
+						if (!strcmp(atts[i], "addon")) {
 							import->plugin_id
 								= parser_strdup(plcontext, atts[i+1]);
 						} else if (!strcmp(atts[i], "version")) {
@@ -828,7 +829,7 @@ static void CP_XMLCALL end_element_handler(
 	switch (plcontext->state) {
 
 		case PARSER_PLUGIN:
-			if (!strcmp(name, "plugin")) {
+			if (!strcmp(name, "addon")) {
 				
 				// Readjust memory allocated for extension points, if necessary 
 				if (plcontext->ext_points_size != plcontext->plugin->num_ext_points) {
@@ -1009,11 +1010,22 @@ CP_C_API cp_plugin_info_t * cp_load_plugin_descriptor(cp_context_t *context, con
 		file[path_len] = CP_FNAMESEP_CHAR;
 		strcpy(file + path_len + 1, CP_PLUGIN_DESCRIPTOR);
 
+#ifdef _WIN32
+    wchar_t* fileW = to_utf16(file, 0);
+    fh = _wfopen(fileW, L"rb");
+    free(fileW);
+    if (!fh)
+    {
+      status = CP_ERR_IO;
+      break;
+    }
+#else
 		// Open the file 
 		if ((fh = fopen(file, "rb")) == NULL) {
 			status = CP_ERR_IO;
 			break;
 		}
+#endif
 
 		// Initialize the XML parsing 
 		parser = XML_ParserCreate(NULL);
@@ -1130,7 +1142,7 @@ CP_C_API cp_plugin_info_t * cp_load_plugin_descriptor(cp_context_t *context, con
 					N_("Plug-in descriptor in %s is invalid."), path);
 				break;
 			case CP_ERR_IO:
-				cpi_errorf(context,
+				cpi_debugf(context,
 					N_("An I/O error occurred while loading a plug-in descriptor from %s."), path);
 				break;
 			case CP_ERR_RESOURCE:
@@ -1184,3 +1196,182 @@ CP_C_API cp_plugin_info_t * cp_load_plugin_descriptor(cp_context_t *context, con
 
 	return plugin;
 }
+
+CP_C_API cp_plugin_info_t * cp_load_plugin_descriptor_from_memory(cp_context_t *context, const char *buffer, unsigned int buffer_len, cp_status_t *error) {
+	char *file = NULL;
+  const char *path = "memory";
+	cp_status_t status = CP_OK;
+	XML_Parser parser = NULL;
+	ploader_context_t *plcontext = NULL;
+	cp_plugin_info_t *plugin = NULL;
+
+	CHECK_NOT_NULL(context);
+	CHECK_NOT_NULL(buffer);
+	cpi_lock_context(context);
+	cpi_check_invocation(context, CPI_CF_ANY, __func__);
+	do {
+		int path_len = 6;
+		file = malloc((path_len + 1) * sizeof(char));
+		if (file == NULL) {
+			status = CP_ERR_RESOURCE;
+			break;
+		}
+    strcpy(file, path);
+
+		// Initialize the XML parsing 
+		parser = XML_ParserCreate(NULL);
+		if (parser == NULL) {
+			status = CP_ERR_RESOURCE;
+			break;
+		}
+		XML_SetElementHandler(parser,
+			start_element_handler,
+			end_element_handler);
+		
+		// Initialize the parsing context 
+		if ((plcontext = malloc(sizeof(ploader_context_t))) == NULL) {
+			status = CP_ERR_RESOURCE;
+			break;
+		}
+		memset(plcontext, 0, sizeof(ploader_context_t));
+		if ((plcontext->plugin = malloc(sizeof(cp_plugin_info_t))) == NULL) {
+			status = CP_ERR_RESOURCE;
+			break;
+		}
+		plcontext->context = context;
+		plcontext->configuration = NULL;
+		plcontext->value = NULL;
+		plcontext->parser = parser;
+		plcontext->file = file;
+		plcontext->state = PARSER_BEGIN;
+		memset(plcontext->plugin, 0, sizeof(cp_plugin_info_t));
+		plcontext->plugin->name = NULL;
+		plcontext->plugin->identifier = NULL;
+		plcontext->plugin->version = NULL;
+		plcontext->plugin->provider_name = NULL;
+		plcontext->plugin->abi_bw_compatibility = NULL;
+		plcontext->plugin->api_bw_compatibility = NULL;
+		plcontext->plugin->plugin_path = NULL;
+		plcontext->plugin->req_cpluff_version = NULL;
+		plcontext->plugin->imports = NULL;
+		plcontext->plugin->runtime_lib_name = NULL;
+		plcontext->plugin->runtime_funcs_symbol = NULL;
+		plcontext->plugin->ext_points = NULL;
+		plcontext->plugin->extensions = NULL;
+		XML_SetUserData(parser, plcontext);
+
+		// Parse the plug-in descriptor 
+    do {
+		  void *xml_buffer;
+		  int i;
+  		
+		  // Get buffer from Expat 
+		  if ((xml_buffer = XML_GetBuffer(parser, buffer_len))
+			  == NULL) {
+			  status = CP_ERR_RESOURCE;
+			  break;
+		  }
+  		
+		  // Read data into buffer
+      memcpy(xml_buffer, buffer, buffer_len);
+
+		  // Parse the data 
+		  if (!(i = XML_ParseBuffer(parser, buffer_len, 1))
+			  && context != NULL) {
+			  cpi_lock_context(context);
+			  cpi_errorf(context,
+				  N_("XML parsing error in %s, line %d, column %d (%s)."),
+				  file,
+				  XML_GetErrorLineNumber(parser),
+				  XML_GetErrorColumnNumber(parser) + 1,
+				  XML_ErrorString(XML_GetErrorCode(parser)));
+			  cpi_unlock_context(context);
+		  }
+		  if (!i || plcontext->state == PARSER_ERROR) {
+			  status = CP_ERR_MALFORMED;
+			  break;
+		  }
+    } while (0);
+		if (status == CP_OK) {
+			if (plcontext->state != PARSER_END || plcontext->error_count > 0) {
+				status = CP_ERR_MALFORMED;
+			}
+			if (plcontext->resource_error_count > 0) {
+				status = CP_ERR_RESOURCE;
+			}
+		}
+		if (status != CP_OK) {
+			break;
+		}
+    
+		// Initialize the plug-in path 
+		*(file + path_len) = '\0';
+		plcontext->plugin->plugin_path = file;
+		file = NULL;
+		
+		// Increase plug-in usage count
+		if ((status = cpi_register_info(context, plcontext->plugin, (void (*)(cp_context_t *, void *)) dealloc_plugin_info)) != CP_OK) {
+			break;
+		}
+		
+	} while (0);
+
+	// Report possible errors
+	if (status != CP_OK) {
+		switch (status) {
+			case CP_ERR_MALFORMED:
+				cpi_errorf(context,
+					N_("Plug-in descriptor in %s is invalid."), path);
+				break;
+			case CP_ERR_IO:
+				cpi_debugf(context,
+					N_("An I/O error occurred while loading a plug-in descriptor from %s."), path);
+				break;
+			case CP_ERR_RESOURCE:
+				cpi_errorf(context,
+					N_("Insufficient system resources to load a plug-in descriptor from %s."), path);
+				break;
+			default:
+				cpi_errorf(context,
+					N_("Failed to load a plug-in descriptor from %s."), path);
+				break;
+		}
+	}
+	cpi_unlock_context(context);
+
+	// Release persistently allocated data on failure 
+	if (status != CP_OK) {
+		if (file != NULL) {
+			free(file);
+			file = NULL;
+		}
+		if (plcontext != NULL && plcontext->plugin != NULL) {
+			cpi_free_plugin(plcontext->plugin);
+			plcontext->plugin = NULL;
+		}
+	}
+	
+	// Otherwise copy the plug-in pointer
+	else {
+		plugin = plcontext->plugin;
+	}
+
+	// Release data allocated for parsing 
+	if (parser != NULL) {
+		XML_ParserFree(parser);
+	}
+	if (plcontext != NULL) {
+		if (plcontext->value != NULL) {
+			free(plcontext->value);
+		}
+		free(plcontext);
+		plcontext = NULL;
+	}
+
+	// Return error code
+	if (error != NULL) {
+		*error = status;
+	}
+
+	return plugin;
+}
diff --git a/libcpluff/pscan.c b/libcpluff/pscan.c
index 38b3297..e752048 100644
--- a/libcpluff/pscan.c
+++ b/libcpluff/pscan.c
@@ -269,13 +269,13 @@ CP_C_API cp_status_t cp_scan_plugins(cp_context_t *context, int flags) {
 	// Report error
 	switch (status) {
 		case CP_OK:
-			cpi_debug(context, N_("Plug-in scan has completed successfully."));
+			cpi_info(context, N_("Plug-in scan has completed successfully."));
 			break;
 		case CP_ERR_RESOURCE:
 			cpi_error(context, N_("Could not scan plug-ins due to insufficient system resources."));
 			break;
 		default:
-			cpi_error(context, N_("Could not scan plug-ins."));
+			cpi_warn(context, N_("Not all directories were successfully scanned."));
 			break;
 	}
 	cpi_unlock_context(context);
diff --git a/libcpluff/psymbol.c b/libcpluff/psymbol.c
index ccf9ea6..632b087 100644
--- a/libcpluff/psymbol.c
+++ b/libcpluff/psymbol.c
@@ -33,6 +33,9 @@
 #include "defines.h"
 #include "internal.h"
 #include "util.h"
+#ifdef _WIN32
+#include <windows.h>
+#endif
 
 
 /* ------------------------------------------------------------------------
diff --git a/libcpluff/util.c b/libcpluff/util.c
index 493b3f0..c4bf501 100644
--- a/libcpluff/util.c
+++ b/libcpluff/util.c
@@ -153,6 +153,7 @@ static int vercmp_num_value(const char *v, const char *vn) {
 CP_HIDDEN int cpi_vercmp(const char *v1, const char *v2) {
 	const char *v1n;
 	const char *v2n;
+	int diff;
 	
 	// Check for NULL versions
 	if (v1 == NULL && v2 != NULL) {
@@ -182,7 +183,7 @@ CP_HIDDEN int cpi_vercmp(const char *v1, const char *v2) {
 			if (v2 < v2n) {
 				c2 = *v2++;
 			}
-			int diff = vercmp_char_value(c1) - vercmp_char_value(c2);
+			diff = vercmp_char_value(c1) - vercmp_char_value(c2);
 			if (diff != 0) {
 				return diff;
 			}
diff --git a/libcpluff/win32/cpluffdef.h b/libcpluff/win32/cpluffdef.h
new file mode 100644
index 0000000..026cfcb
--- /dev/null
+++ b/libcpluff/win32/cpluffdef.h
@@ -0,0 +1,211 @@
+/*-------------------------------------------------------------------------
+ * C-Pluff, a plug-in framework for C
+ * Copyright 2007 Johannes Lehtinen
+ * 
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included
+ * in all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
+ * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+ * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
+ * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
+ * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
+ * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ *-----------------------------------------------------------------------*/
+
+/** @file
+ * Common defines shared by C-Pluff C and C++ APIs.
+ * This file is automatically included by the top level C and C++
+ * API header files. There should be no need to include it explicitly.
+ */
+
+#ifndef CPLUFFDEF_H_
+#define CPLUFFDEF_H_
+
+
+/* ------------------------------------------------------------------------
+ * Version information
+ * ----------------------------------------------------------------------*/
+
+/**
+ * @defgroup versionInfo Version information
+ * @ingroup cDefines cxxDefines
+ *
+ * C-Pluff version information. Notice that this version information
+ * is static version information included in header files. The
+ * macros introduced here can be used for compile time checks.
+ */
+/*@{*/
+
+/**
+ * The C-Pluff release version string. This string identifies a specific
+ * version of the C-Pluff distribution. Compile time software compatibility
+ * checks should use #CP_VERSION_MAJOR and #CP_VERSION_MINOR instead.
+ */
+#define CP_VERSION "0.1.3"
+
+/**
+ * The major version number component of the release version. This is an
+ * integer.
+ */
+#define CP_VERSION_MAJOR 0
+
+/**
+ * The minor version number component of the release version. This is an
+ * integer.
+ */
+#define CP_VERSION_MINOR 1
+
+/*@}*/
+
+
+/* ------------------------------------------------------------------------
+ * Symbol visibility
+ * ----------------------------------------------------------------------*/
+
+/**
+ * @defgroup symbolVisibility Symbol visibility
+ * @ingroup cDefines cxxDefines
+ *
+ * Macros for controlling inter-module symbol visibility and linkage. These
+ * macros have platform specific values. #CP_EXPORT, #CP_IMPORT and #CP_HIDDEN
+ * can be reused by plug-in implementations for better portability. The
+ * complexity is mostly due to Windows DLL exports and imports.
+ *
+ * @anchor symbolVisibilityExample
+ * Each module should usually define its own macro to declare API symbols with
+ * #CP_EXPORT and #CP_IMPORT as necessary. For example, a mobule could define
+ * a macro @c MY_API in the API header file as follows.
+ *
+ * @code
+ * #ifndef MY_API
+ * #  define MY_API CP_IMPORT
+ * #endif
+ * @endcode
+ *
+ * By default the API symbols would then be marked for import which is correct
+ * when client modules are including the API header file. When compiling the
+ * module itself the option @c -DMY_API=CP_EXPORT would be passed to the compiler to
+ * override the API header file and to mark the API symbols for export.
+ * The overriding definition could also be included in module source files or
+ * in an internal header file before including the API header file.
+ */
+/*@{*/
+
+/**
+ * @def CP_EXPORT
+ *
+ * Declares a symbol to be exported for inter-module usage. When compiling the
+ * module which defines the symbol this macro should be placed
+ * at the start of the symbol declaration to ensure that the symbol is exported
+ * to other modules. However, when compiling other modules the declaration of
+ * the symbol should start with #CP_IMPORT.
+ * See @ref symbolVisibilityExample "the example" of how to do this.
+ */
+
+/**
+ * @def CP_IMPORT
+ *
+ * Declares a symbol to be imported from another module. When compiling a
+ * module which uses the symbol this macro should be placed at the start of
+ * the symbol declaration to ensure that the symbol is imported from the
+ * defining module. However, when compiling the defining module the declaration
+ * of the symbol should start with #CP_EXPORT.
+ * See @ref symbolVisibilityExample "the example" of how to do this.
+ */
+
+/**
+ * @def CP_HIDDEN
+ *
+ * Declares a symbol hidden from other modules. This macro should be
+ * placed at the start of the symbol declaration to hide the symbol from other
+ * modules (if supported by the platform). This macro is not intended to be
+ * used with symbols declared as "static" which are already internal to the
+ * object file. Some platforms do not support hiding of symbols and therefore
+ * unique prefixes should be used for global symbols internal to the module
+ * even when they are declared using this macro.
+ */
+
+#if defined(_WIN32)
+#  define CP_EXPORT __declspec(dllexport)
+#  define CP_IMPORT extern __declspec(dllimport)
+#  define CP_HIDDEN
+#elif defined(__GNUC__) && (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 3))
+#  define CP_EXPORT
+#  define CP_IMPORT extern
+#  define CP_HIDDEN __attribute__ ((visibility ("hidden")))
+#else
+#  define CP_EXPORT
+#  define CP_IMPORT extern
+#  define CP_HIDDEN
+#endif
+/*@}*/
+
+
+/* ------------------------------------------------------------------------
+ * GCC attributes
+ * ----------------------------------------------------------------------*/
+
+/**
+ * @defgroup cDefinesGCCAttributes GCC attributes
+ * @ingroup cDefines cxxDefines
+ *
+ * These macros conditionally define GCC attributes for declarations.
+ * They are used in C-Pluff API declarations to enable better optimization
+ * and error checking when using GCC. In non-GCC platforms they have
+ * empty values.
+ */
+/*@{*/
+
+/**
+ * @def CP_GCC_PURE
+ *
+ * Declares a function as pure function having no side effects.
+ * This attribute is supported in GCC since version 2.96.
+ * Such functions can be subject to common subexpression elimination
+ * and loop optimization.
+ */
+
+/**
+ * @def CP_GCC_NONNULL
+ *
+ * Specifies that some pointer arguments to a function should have
+ * non-NULL values. Takes a variable length list of argument indexes as
+ * arguments. This attribute is supported in GCC since version 3.3.
+ * It can be used for enhanced error checking and some optimizations.
+ */
+
+#if __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ >= 96)
+#define CP_GCC_PURE __attribute__((pure))
+#else
+#define CP_GCC_PURE
+#endif
+#if __GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 3)
+#define CP_GCC_NONNULL(...) __attribute__((nonnull (__VA_ARGS__)))
+#else
+#define CP_GCC_NONNULL(...)
+#endif
+
+/*@}*/
+
+#ifdef _WIN32
+#ifndef __func__
+#  define __func__ __FUNCTION__
+#endif
+#ifndef snprintf
+#define snprintf _snprintf
+#endif
+#define CP_HOST "win32"
+#define CP_SHREXT ".dll"
+#define CP_FNAMESEP_CHAR '\\' // If we switch back to special:// paths then this can be '/' instead
+#define CP_THREADS
+#endif
+#endif /*CPLUFFDEF_H_*/
diff --git a/libcpluff/win32/dirent.c b/libcpluff/win32/dirent.c
new file mode 100644
index 0000000..20870ad
--- /dev/null
+++ b/libcpluff/win32/dirent.c
@@ -0,0 +1,231 @@
+/*
+
+    Implementation of POSIX directory browsing functions and types for Win32.
+
+    Author:  Kevlin Henney (kevlin@acm.org, kevlin@curbralan.com)
+    History: Created March 1997. Updated June 2003.
+    Rights:  See end of file.
+
+*/
+
+#include "dirent.h"
+#include "win32_utils.h"
+#include <errno.h>
+#include <io.h> /* _findfirst and _findnext set errno iff they return -1 */
+#include <stdlib.h>
+#include <string.h>
+
+#ifdef __cplusplus
+extern "C"
+{
+#endif
+
+struct DIR
+{
+	HANDLE handle; /* -1 for failed rewind */
+    struct dirent       result; /* d_name null iff first time */
+	wchar_t* name;
+	WIN32_FIND_DATAW info;
+};
+
+DIR *opendir(const char *name)
+{
+    DIR *dir = 0;
+
+    if(name && name[0])
+    {
+        if ((dir = (DIR *)malloc(sizeof *dir)) != 0)
+        {
+            dir->handle = INVALID_HANDLE_VALUE;
+            int len = strlen(name);
+            size_t newLength = len + 2; //add an extra for null and another for a * at the end
+            if (!(name[0] == '\\' && name[1] == '\\' && name[2] == '?' && name[3] == '\\'))
+                newLength += 4;
+            if (name[len - 1] != '\\')
+                newLength += 1;
+
+            char* newDir = (char*)malloc(newLength);
+            strcpy_s(newDir, newLength, "\\\\?\\");
+            strcat_s(newDir, newLength, name);
+            if (name[len - 1] != '\\')
+                strcat_s(newDir, newLength, "\\");
+            strcat_s(newDir, newLength, "*");
+            newDir[newLength - 1] = '\0';
+
+            dir->name = to_utf16(newDir, newLength);
+            free(newDir);
+
+            dir->handle = FindFirstFileW(dir->name, &dir->info);
+            if (dir->handle != INVALID_HANDLE_VALUE)
+            {
+                dir->result.d_name = 0;
+            }
+            else /* rollback */
+            {
+                free(dir->name);
+                free(dir);
+                dir = 0;
+            }
+        }
+        else /* rollback */
+        {
+            free(dir->name);
+            free(dir);
+            dir   = 0;
+            errno = ENOMEM;
+        }
+    }
+    else
+    {
+        errno = EINVAL;
+    }
+
+    return dir;
+}
+
+int closedir(DIR *dir)
+{
+    int result = -1;
+
+    if(dir && dir->handle != INVALID_HANDLE_VALUE)
+    {
+        FindClose(dir->handle);
+
+        free(dir->name);
+        free(dir);
+    }
+
+    if(result == -1) /* map all errors to EBADF */
+    {
+        errno = EBADF;
+    }
+
+    return result;
+}
+
+struct dirent *readdir(DIR *dir)
+{
+    struct dirent *result = 0;
+
+    if(dir && dir->handle != INVALID_HANDLE_VALUE)
+    {
+        if (FindNextFileW(dir->handle, &dir->info))
+        {
+            result         = &dir->result;
+            result->d_name = to_utf8(dir->info.cFileName, 0);
+        }
+    }
+    else
+    {
+        errno = EBADF;
+    }
+
+    return result;
+}
+
+// helper for scandir below
+static void scandir_free_dir_entries(struct dirent*** namelist, int entries) {
+	int i;
+	if (!*namelist) return;
+	for (i = 0; i < entries; ++i) {
+		free((*namelist)[i]);
+	}
+	free(*namelist);
+	*namelist = 0;
+}
+
+// returns the number of directory entries select or -1 if an error occurs
+int scandir(
+	const char* dir,
+	struct dirent*** namelist,
+	int(*filter)(const struct dirent*),
+	int(*compar)(const void*, const void*)
+) {
+	int entries = 0;
+	int max_entries = 1024; // assume 2*512 = 1024 entries (used for allocation)
+	DIR* d;
+
+	*namelist = 0;
+
+	// open directory
+	d = opendir(dir);
+	if (!d) return -1;
+
+	// iterate
+	while (1) {
+		struct dirent* ent = readdir(d);
+		if (!ent) break;
+
+		// add if no filter or filter returns non-zero
+		if (filter && (0 == filter(ent))) continue;
+
+		// resize our buffer if there is not enough room
+		if (!*namelist || entries >= max_entries) {
+			struct dirent** new_entries;
+
+			max_entries *= 2;
+			new_entries = (struct dirent **)realloc(*namelist, max_entries);
+			if (!new_entries) {
+				scandir_free_dir_entries(namelist, entries);
+				closedir(d);
+				errno = ENOMEM;
+				return -1;
+			}
+
+			*namelist = new_entries;
+		}
+
+		// allocate new entry
+		(*namelist)[entries] = (struct dirent *)malloc(sizeof(struct dirent) + strlen(ent->d_name) + 1);
+		if (!(*namelist)[entries]) {
+			scandir_free_dir_entries(namelist, entries);
+			closedir(d);
+			errno = ENOMEM;
+			return -1;
+		}
+
+		// copy entry info
+		*(*namelist)[entries] = *ent;
+
+		// and then we tack the string onto the end
+		{
+			char* dest = (char*)((*namelist)[entries]) + sizeof(struct dirent);
+			strcpy(dest, ent->d_name);
+			(*namelist)[entries]->d_name = dest;
+		}
+
+		++entries;
+	}
+
+	closedir(d);
+
+	// sort
+	if (*namelist && compar) qsort(*namelist, entries, sizeof((*namelist)[0]), compar);
+
+	return entries;
+}
+
+int alphasort(const void* lhs, const void* rhs) {
+	const struct dirent* lhs_ent = *(struct dirent**)lhs;
+	const struct dirent* rhs_ent = *(struct dirent**)rhs;
+	return _strcmpi(lhs_ent->d_name, rhs_ent->d_name);
+}
+
+#ifdef __cplusplus
+}
+#endif
+
+/*
+
+    Copyright Kevlin Henney, 1997, 2003. All rights reserved.
+
+    Permission to use, copy, modify, and distribute this software and its
+    documentation for any purpose is hereby granted without fee, provided
+    that this copyright and permissions notice appear in all copies and
+    derivatives.
+
+    This software is supplied "as is" without express or implied warranty.
+
+    But that said, if there are any problems please get in touch.
+
+*/
diff --git a/libcpluff/win32/dirent.h b/libcpluff/win32/dirent.h
new file mode 100644
index 0000000..c250bfd
--- /dev/null
+++ b/libcpluff/win32/dirent.h
@@ -0,0 +1,57 @@
+
+#ifndef DIRENT_INCLUDED
+#define DIRENT_INCLUDED
+
+/*
+
+    Declaration of POSIX directory browsing functions and types for Win32.
+
+    Author:  Kevlin Henney (kevlin@acm.org, kevlin@curbralan.com)
+    History: Created March 1997. Updated June 2003.
+    Rights:  See end of file.
+
+*/
+
+#ifdef __cplusplus
+extern "C"
+{
+#endif
+
+typedef struct DIR DIR;
+
+struct dirent
+{
+    char *d_name;
+};
+
+DIR           *opendir(const char *);
+int           closedir(DIR *);
+struct dirent *readdir(DIR *);
+void          rewinddir(DIR *);
+int scandir(
+	const char* dir,
+	struct dirent*** namelist,
+	int(*filter)(const struct dirent*),
+	int(*compar)(const void*, const void*) );
+int alphasort(const void* lhs, const void* rhs);
+
+/*
+
+    Copyright Kevlin Henney, 1997, 2003. All rights reserved.
+
+    Permission to use, copy, modify, and distribute this software and its
+    documentation for any purpose is hereby granted without fee, provided
+    that this copyright and permissions notice appear in all copies and
+    derivatives.
+
+    This software is supplied "as is" without express or implied warranty.
+
+    But that said, if there are any problems please get in touch.
+
+*/
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif
diff --git a/libcpluff/win32/win32_utils.c b/libcpluff/win32/win32_utils.c
new file mode 100644
index 0000000..a606fc6
--- /dev/null
+++ b/libcpluff/win32/win32_utils.c
@@ -0,0 +1,74 @@
+/*-------------------------------------------------------------------------
+ * C-Pluff, a plug-in framework for C
+ * Copyright 2016 Team Kodi
+ * 
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included
+ * in all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
+ * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+ * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
+ * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
+ * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
+ * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ *-----------------------------------------------------------------------*/
+#include <stdlib.h>
+#if defined(WIN32) || defined(_MSC_VER)
+
+#include "win32_utils.h"
+
+wchar_t* to_utf16(const char* str, size_t length)
+{
+  if (length == 0)
+    length = strlen(str);
+  int result = MultiByteToWideChar(CP_UTF8, 0, str, length, NULL, 0);
+  if (result == 0)
+  {
+    return NULL;
+  }
+
+  int newLen = result + 1;
+  wchar_t* dirPath = malloc(newLen * 2);
+  result = MultiByteToWideChar(CP_UTF8, 0, str, length, dirPath, newLen);
+
+  if (result == 0)
+  {
+    free(dirPath);
+    return NULL;
+  }
+
+  dirPath[newLen - 1] = L'\0';
+  return dirPath;
+}
+
+char* to_utf8(const wchar_t* str, size_t length)
+{
+  if (length == 0)
+    length = wcslen(str);
+
+  int result = WideCharToMultiByte(CP_UTF8, 0, str, length, NULL, 0, NULL, NULL);
+  if (result == 0)
+    return NULL;
+
+  int newLen = result + 1;
+  char *newStr = malloc(newLen);
+  result = WideCharToMultiByte(CP_UTF8, 0, str, length, newStr, result, NULL, NULL);
+  if (result == 0)
+  {
+    free(newStr);
+    return NULL;
+  }
+
+  newStr[newLen - 1] = '\0';
+
+  return newStr;
+}
+#endif
diff --git a/libcpluff/win32/win32_utils.h b/libcpluff/win32/win32_utils.h
new file mode 100644
index 0000000..7f88756
--- /dev/null
+++ b/libcpluff/win32/win32_utils.h
@@ -0,0 +1,30 @@
+/*-------------------------------------------------------------------------
+ * C-Pluff, a plug-in framework for C
+ * Copyright 2016 Team Kodi
+ * 
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included
+ * in all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
+ * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+ * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
+ * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
+ * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
+ * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ *-----------------------------------------------------------------------*/
+
+#if defined(_WIN32) || defined(_MSC_VER)
+#define WIN32_LEAN_AND_MEAN 1
+#include <windows.h>
+wchar_t* to_utf16(const char* str, size_t length);
+char* to_utf8(const wchar_t* str, size_t length);
+
+#endif
-- 
2.10.2.windows.1

